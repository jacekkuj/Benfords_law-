Challenge: Widgets
Create a basic system description and document a normalized schema from the attached widgets text file.  
Include 
1) what you think this system would do 
2) what you feel would be a reasonable database structure for the data and a reasonable architecture for the system 
3) any questions or concerns you have regarding this dataset/system that might need to be answered before establishing an ideal database/solution for such a system.

It's a very open-ended problem, and that's part of the problem.

1) What you think this system would do?:
This database could be part of a system that supports a small Sales Interface. 
This interface could help help Sales Representatives at a small Widget Manufacturer/Distributor to create specially priced Customer Packages for their Retailers. 
Their business driver could be to incentivize their Retailers to increase their purchase quantities and purchasing frequency. 
The Sales Representatives could use the interface to create unique packages for their Customers based on the four variables: Customer + Widget + Packaging + Price. 
Moreover, any new Customer Package could be picked up by other interfaces, including an Invoicing System.
2) What you feel would be a reasonable database structure for the data and a reasonable architecture for the system?:
Regarding the database schema - we are able to present: Widgets Relationships, Widgets Table Structure using Pandas, SQL approach etc.
Regarding the system architecture -iIt seems the architecture can be light weight given such small data– three Customers, five Widgets, and three types of Packaging (i.e., box, crate, or bag). 
Given that the Sales Representative could figure out the units and pricing on the fly—with simple validation checks for widget-package pairing (i.e., an Elephant Trap cannot fit into an Ant Trap bag). 
Then perhaps we could build a simple client-server setup with a front-end GUI that makes simple API GET requests for the current Customer Package information and simple PUT requests to register any new packages. 
The API could be updated whenever users of other system make baseline changes to the contents of Customers, Widgets, or Packaging.
3) Any questions or concerns you have regarding this dataset/system that might need to be answered before establishing an ideal database/solution for such a system?:
Regarding the system: what kind of system is desired and how it meets our business needs? Do we need to track inventory? What else? More data are needed?
Regarding the data set: do the Prices in the data represent the amounts that Customers have paid for Widgets, or do they refer to something else?
Do the qty and min qty values refer to inventory, purchase orders?
If the Prices in the data are related to customer transactions, then do we have any additional historical data related to those transactions (i.e., invoice numbers)? What is the current working data model? Do we need to update it to provide new data points?

----------------------------


Challenge: Benford's Law

In 1938, Frank Benford published a paper showing the distribution of the leading digit in many disparate sources of data. In all these sets of data, the number 1 was the leading digit about 30% of the time. Benford’s law has been found to apply to population numbers, death rates, lengths of rivers, mathematical distributions given by some power law, and physical constants like atomic weights and specific heats.

Create a python-based web application (use of tornado or flask is fine) that

1) can ingest the attached example file (census_2009b) and any other flat file with a viable target column. Note that other columns in user-submitted files may or may not be the same as the census data file and users are known for submitting files that don't always conform to rigid expectations. How you deal with files that don't conform to the expectations of the application is up to you, but should be reasonable and defensible.

2) validates Benford’s assertion based on the '7_2009' column in the supplied file

3) Outputs back to the user a graph of the observed distribution of numbers with an overlay of the expected distribution of numbers. The output should also inform the user of whether the observed data matches the expected data distribution.

The delivered package should contain a docker file that allows us to docker run the application and test the functionality directly.

Bonus points for automated tests.

Stretch challenge: persist the uploaded information to a database so a user can come to the application and browse through datasets uploaded by other users. No user authentication/user management is required here… assume anonymous users and public datasets.